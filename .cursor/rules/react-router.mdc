---
description: 
globs: apps/web/**
alwaysApply: false
---
You are an expert in React Router framework mode (formerly Remix), Cloudflare developer products (like workers, D1, etc), TailwindCSS, Mantine and TypeScript, focusing on scalable web development.

**TypeScript & React Router**
- Define data structures with interfaces for type safety.
- Avoid the `any` type, fully utilize TypeScript's type system.
- Organize files: imports, loaders/actions, component logic.
- Use template strings for multi-line literals.
- Use nested layouts and dynamic routes where applicable.
- Leverage loaders for efficient server-side rendering and data fetching.
- Use ES6 pattern for functions instead of ES5 function keyword. This should be followed everywhere apart from framework specific exports like `shouldRevalidate`, `loader`, etc

**File Naming Conventions**
- `*.tsx` for React components
- `*.ts` for utilities, types, and configurations
- `root.tsx` for the root layout
- All component files use PascalCase and should be default export. Other files use kebab-case.
- `routes.ts` to define routes and layouts

**Import Order**
1. Third-party packages
2. Relative path imports

**Error Handling and Validation**
- Implement error boundaries for catching unexpected errors.
- Use custom error handling within loaders and actions.
- Validate user input on both client and server using formData or JSON.

**Performance Optimization**
- Prefetch routes using `<Link prefetch="intent">` for faster navigation.
- Defer non-essential JavaScript using `<Scripts defer />`.
- Optimize nested layouts to minimize re-rendering.
- Use React Router's built-in caching and data revalidation to optimize performance.

**Key Conventions**
- Use React Router's loaders and actions to handle server-side logic.
- Focus on reusability and modularity across routes and components.
- Follow React Router's best practices for file structure and data fetching.
- Optimize for performance and accessibility.
- Refer to how queries are written under **queries** folder where each query goes under a new file, utilizes the `createClient` function and are clubbed based on resources.

**Reference**
Refer to React Router's official documentation for best practices in Routes, Loaders, and Actions.

**Style and component guide**
- Try to use Mantine's components like Button, TextInput, etc for the elements.
- Do not use Text, Grid, Group components of Mantine. Instead use p, h1, h2, divs with either grid, flex classes and other relevant HTML tags with with relevant Tailwind classnames
- If anything is unachievable by div, only then use Box component
- For styling first use className and use TailwindCSS classes. Fallback to classNames or styles (Mantine features) if the Tailwind classes are not sufficient or a lot of dynamic styles are required
- For forms, use `react-hook-form`. Refer to `CreateBucketModal.tsx` on how I'm using RHF (react-hook-form). If you want to use any components with RHF, use them from `components/form` and if you're creating any new components, create under the same.

**Examples**
- Whenever you're importing TanStack Query's hooks, do no destructure.

// Good example

const activityById = useActivityById('123456')

if(activityById.isLoading) return 'Loading'

return JSON.stringify(activityById.data)

// Bad example

const {data, isLoading} = useActivityById('123456')

if(isLoading) return 'Loading'

return JSON.stringify(data)

- Do not give unnecessary comments which can be gleaned by reading the code.

// Bad example

// This filters the list

const arr = [1, 2, 3].filter(ele => ele===2)